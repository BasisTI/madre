entity Exame {
nome String required
nomeUsual String
sigla String required
ativo Boolean required
impressao Boolean required
consisteInterfaceamento Boolean required
anexaDocumentos Boolean required
}

entity Material {
nome String required
ativo Boolean required
coletavel Boolean required
exigeInformacao Boolean required
urina Boolean required
}

entity Recomendacao {
descricao String required
avisoResponsavel Boolean required
responsavel Responsavel
abrangencia Abrangencia
}

entity TipoAmostra {
nome String required
}

entity ItemSolicitacaoExame {
urgente Boolean required
dataProgramada LocalDate required
situacao Situacao required
}

entity SolicitacaoExame {
id Integer required
infoClinica String required
usoAntimicrobianos24h Boolean required
pedidoPrimeiroExame Boolean required
}

entity Sinonimo {
nome String required
situacao Boolean
}

entity GrupoAgendamentoExame {
nome String required
codigo Integer required
agendarEmConjunto Boolean
calcularOcupacao Boolean
ativo Boolean required
}

entity GradeDeAgendamento {
grade String required
unidadeExecutoraId Integer required
responsavelId Integer
ativo Boolean required
}

entity HorarioAgendado {
horaInicio Instant required
horafim Instant required
numeroDeHorarios Integer
dia Dia required
duracao Duration
ativo Boolean required
exclusivo Boolean required
}

entity HorarioLivre {
dataHoraInicio LocalDate required
dataHoraFim LocalDate required
ocupado Boolean required
}

entity Sala {
codigoDaSala Integer required
identificacaoDaSala String required
locacaoDaSala String required
ativo Boolean required
unidadeExecutoraId Integer
}

entity TipoDeMarcacao {
codigo Integer
tipoDeMarcacao String
ativo Boolean required
}

enum Dia {
DOMINGO,
SEGUNDA_FEIRA,
TERCA_FEIRA,
QUARTA_FEIRA,
QUINTA_FEITA,
SEXTA_FEIRA,
SABADO
}

relationship OneToMany {
GradeDeAgendamento{gradeHorario(grade)} to HorarioAgendado
HorarioAgendado{horarioAgendadoLivre(dia)} to HorarioLivre
Sala{salaExecutora(identificacaoDaSala)} to GradeDeAgendamento
Exame{exameGrade(nome)} to GradeDeAgendamento
GrupoAgendamentoExame{grupoExameGrade(nome)} to GradeDeAgendamento
}

relationship OneToOne {
HorarioAgendado{horarioAgendado(dia)} to TipoDeMarcacao
}

enum Responsavel {
COLETADOR, SOLICITANTE, PACIENTE
}

enum Abrangencia {
AMBULATORIO, INTERNACAO, AMBOS
}

enum Situacao {
A_COLETAR, AREA_EXECUTORA, COLETADO
}

relationship OneToMany {
Material{material(nome)} to Recomendacao,
SolicitacaoExame{solicitacaoExame(infoClinica)} to ItemSolicitacaoExame
}

relationship ManyToOne {
Exame{materialExame(nome)} to Material,
Sinonimo{sinonimo(nome)} to Exame,
Exame{amostraExame(nome)} to TipoAmostra,
ItemSolicitacaoExame{itemSolicitacaoExame(situacao)} to Exame
}

relationship ManyToMany {
GrupoAgendamentoExame {Exame(nome)} to Exame {grupoAgendamentoExame(nome)}
}

dto * with mapstruct
paginate * with pagination
service * with serviceClass
search * with elasticsearch
skipClient *
